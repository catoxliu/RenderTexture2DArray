using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ShowTexture2DArray : MonoBehaviour {
	
	//The demo scene is a very simple example just give you a hint about this plugin's working.
	//There are two cameras, one for rendering texture2darray and the other for screen display.
	//Two cameras have different culling mask
	//This script attach to the screen camera and have two Quad to render
	//Two Quad use the special GLSL shader sampler the Texture2DArray generated by the off-screen camera
	//Since the shader keywords "STEREO_MULTIVIEW_ON" is enabled, normal Unity shaders could not used
	//for normal rendering, like the screen camera in this scene.
	//Use a pure GLSL shader will avoid this, but you may not see it work on Windows platform (Editor).
	//Two Quad material is set to different layers of Texture2DArray, layer 0 for left eye, 1 for right eye.

    public RT2DARRAY.RenderTexture2DArray RT2DArray;
    public Material LeftQuadMat;
    public Material RightQuadMat;

    public Transform Cube;
    public Transform Capsule;
    public Transform renderCamera;

	// Use this for initialization
	void Start () {
        LeftQuadMat.SetTexture("_MyArr", RT2DArray.renderTexture);
        RightQuadMat.SetTexture("_MyArr", RT2DArray.renderTexture);
		//Enable the gyro for test, to let the off-screen camera could rotate around.
        Input.gyro.enabled = true;
    }
	
	// Update is called once per frame
	void Update () {
        Cube.Rotate(Vector3.up, 1, Space.World);
        Capsule.Rotate(Vector3.right, 1, Space.World);
        renderCamera.rotation = Input.gyro.attitude;
        if (Input.GetKey(KeyCode.Escape))
        {
            Application.Quit();
        }
    }
}
